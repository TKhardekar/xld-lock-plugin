import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id "com.github.hierynomus.license" version "0.13.1"
  id "com.xebialabs.xldp" version "1.0.5"
  id "com.xebialabs.xl.docker" version "1.1.0"
  id "nebula.release" version "6.0.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

xlDocker {
  compileImage = 'xebialabs/xld_dev_compile'
  compileVersion = 'v8.0.0.1'
  runImage = 'xebialabs/xld_dev_run'
  runVersion = 'v8.0.0.1'
  runPortMapping = '14516:4516'
}

if (!project.hasProperty('release.scope')) {
  project.ext['release.scope'] = 'patch'
}

if (!project.hasProperty('release.useLastTag')) {
  project.ext['release.useLastTag'] = true
}


processResources.configure {
  filter ReplaceTokens, tokens: [
    'project.version': version.toString(),
    'project.name'   : rootProject.name
  ]
}

group = 'com.xebialabs.deployit.community'
sourceCompatibility = 1.7
targetCompatibility = 1.7
def apiVersion = '2018.3.5'
def xldeployHome = "$System.env.XLDEPLOY_HOME"

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://dist.xebialabs.com/public/maven2'
  }
}

configurations {
  compile {
    transitive = false
  }
  itestCompile { extendsFrom testCompile }
  itestRuntime { extendsFrom itestCompile, testRuntime }
}

dependencies {
  compile "com.xebialabs.deployit:udm-plugin-api:$apiVersion"
  compile "com.xebialabs.deployit:engine-spi:$apiVersion"
  compile "com.xebialabs.deployit:engine-api:$apiVersion"
  compile "com.google.guava:guava:10.0.1"
  compile "org.slf4j:slf4j-api:1.7.12"
  testCompile "org.hamcrest:hamcrest-core:1.2.1"
  testCompile "org.hamcrest:hamcrest-library:1.2.1"
  testCompile "com.google.guava:guava:10.0.1"
  testCompile "junit:junit-dep:4.10"
  itestCompile fileTree(dir: "$xldeployHome/lib", include: ['*.jar'])
}

sourceSets {
  itest {
    java {
      srcDirs = ['src/test/itest']
    }
    compileClasspath = sourceSets.main.output + configurations.testCompile + configurations.itestCompile
    runtimeClasspath = sourceSets.itest.output + configurations.itestCompile + sourceSets.main.output + configurations.itestRuntime
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

license {
  header rootProject.file('License.md')
  strictCheck true
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
  ext.name = 'XEBIALABS'
}

task itest(dependsOn: 'itestClasses', type: Test) {
  testClassesDir = sourceSets.itest.output.classesDir
  classpath = sourceSets.itest.runtimeClasspath
}

itest.configure {
  useJUnit() {
  }
}   

